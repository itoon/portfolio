{"version":3,"file":"static/webpack/static/development/pages/index.js.686ea257e2a5ff77f9ec.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js'\nimport Cookies from 'js-cookie'\nimport jwt from 'jsonwebtoken'\nimport axios from 'axios'\n\nclass Auth0 {  \n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n        domain: 'marvelous-studio.auth0.com',\n        clientID: 'sHsD76ZBw7vm1Wnte0LnAz4SZ28vVYdE',\n        redirectUri: 'http://localhost:3000/callback',\n        responseType: 'token id_token',\n        scope: 'openid profile'\n    });\n\n    this.login = this.login.bind(this)\n    this.logout = this.logout.bind(this)    \n    this.handleAuthentication = this.handleAuthentication.bind(this)\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);        \n          resolve()\n        } else if (err) {                  \n          console.log(err);\n          alert(`Error: ${err.error}. Check the console for further details.`);\n          reject()\n        }\n      })\n    })  \n  }\n  \n  setSession(authResult) {        \n    const expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();    \n    Cookies.set('user', authResult.idTokenPayLoad)\n    Cookies.set('jwt', authResult.idToken)\n    Cookies.set('expiresAt', expiresAt)\n  }\n\n  logout() {\n    Cookies.remove('user')\n    Cookies.remove('jwt')\n    Cookies.remove('expiresAt')\n    this.auth0.logout({\n      returnTo: '',\n      clientID: 'sHsD76ZBw7vm1Wnte0LnAz4SZ28vVYdE'\n    })\n  }\n\n  async getJWKS() {\n    const res = await axios.get('https://marvelous-studio.auth0.com/.well-know/jwks.json')\n    const jwks = res.data\n    return jwks\n  }\n\n  async verifyToken(token) {\n    debugger\n    if(token){      \n      const decodeToken = jwt.decode(token, {complete: true})\n\n      const jwks = await this.getJWKS()\n      const jwk = jwks.keys[0]\n      //Build Cert\n      let cert = jwk.x5c[0]\n      cert = cert.match(/.{1,64}/g).join('\\n')\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}-----END CERTIFICATE-----\\n`\n      // End\n\n      if(jwt.kid == decodeToken.header.kid){\n        try {\n          const verifyToken = jwt.verify(token, cert)\n          const expiresAt = verifyToken.exp * 1000\n\n          return (verifyToken && new Date().getTime() < expiresAt) ? verifyToken : undefined\n        } catch (err) {\n          return undefined\n        }\n      }          \n    }\n    return undefined\n  }\n\n  clientAuth() {\n    const token = Cookies.getJSON('jwt')\n    const verifyToken = this.verifyToken(token)\n    return verifyToken\n  }  \n\n  serverAuth(req) {    \n    if(req.headers.cookie){\n      const jwtCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith('jwt='))\n      if(!jwtCookie){ return undefined }\n      const token = jwtCookie.split('=')[1]\n      const verifyToken = this.verifyToken(token)\n      return verifyToken\n    }\n  }\n}\n\nconst auth0Client = new Auth0()\nexport default auth0Client"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;AAGA;AACA;;AADA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AAAA;;;;;AACA;AAAA;AAAA;;AAEA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAEA;AACA;AAEA;AACA;;;;AACA;AACA;;AAGA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;;;;A","sourceRoot":""}