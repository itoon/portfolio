{"version":3,"file":"static/webpack/static/development/pages/index.js.bcd0fd5d223916d0bb13.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie'\n\nclass Auth0 {  \n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n        domain: 'marvelous-studio.auth0.com',\n        clientID: 'sHsD76ZBw7vm1Wnte0LnAz4SZ28vVYdE',\n        redirectUri: 'http://localhost:3000/callback',\n        responseType: 'token id_token',\n        scope: 'openid profile'\n    });\n\n    this.login = this.login.bind(this)\n    this.logout = this.logout.bind(this)\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this)\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);        \n          resolve()\n        } else if (err) {                  \n          console.log(err);\n          alert(`Error: ${err.error}. Check the console for further details.`);\n          reject()\n        }\n      })\n    })  \n  }\n  \n  setSession(authResult) {        \n    const expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();    \n    Cookies.set('user', authResult.idTokenPayLoad)\n    Cookies.set('jwt', authResult.idToken)\n    Cookies.set('expiresAt', expiresAt)\n  }\n\n  logout() {\n    Cookies.remove('user')\n    Cookies.remove('jwt')\n    Cookies.remove('expiresAt')\n    this.auth0.logout({\n      returnTo: '',\n      clientID: 'sHsD76ZBw7vm1Wnte0LnAz4SZ28vVYdE'\n    })\n  }\n\n  isAuthenticated() {\n    const expiresAt = Cookies.getJSON('expiresAt')\n    return new Date().getTime() < expiresAt\n  }\n\n  clientAuth() {\n    return this.isAuthenticated()\n  }\n\n  verifyToken(token) {\n    if(token){\n      \n    }\n    return undefined\n  }\n\n  serverAuth(req) {    \n    if(req.headers.cookie){\n      const expiresAtCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith('expiresAt='))\n      if(!expiresAtCookie){ return undefined }\n      const expiresAt = expiresAtCookie.split('=')[1]\n      return new Date().getTime() < expiresAt              \n    }\n  }\n}\n\nconst auth0Client = new Auth0()\nexport default auth0Client"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAGA;AACA;;;;A","sourceRoot":""}